'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _events = require('events');

var _proxy = require('./proxy');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Queue = function (_EventEmitter) {
	(0, _inherits3.default)(Queue, _EventEmitter);

	function Queue(path) {
		(0, _classCallCheck3.default)(this, Queue);

		var _this = (0, _possibleConstructorReturn3.default)(this, (Queue.__proto__ || (0, _getPrototypeOf2.default)(Queue)).call(this));

		_this.path = path;
		return _this;
	}

	(0, _createClass3.default)(Queue, [{
		key: 'startReceiving',
		value: function startReceiving() {
			var _this2 = this;

			if (this.receiving) {
				throw new Error('Already receiving messages from this queue');
			}

			this.receiving = true;

			return _proxy.queueProxy.receive({
				path: this.path,
				receive: function receive(message) {
					_this2.emit('receive', message);
				}
			});
		}
	}, {
		key: 'send',
		value: function send(message, cb) {
			var formattedMessage = (0, _stringify2.default)(message);

			return _proxy.queueProxy.send({
				path: this.path,
				message: formattedMessage
			}, cb);
		}
	}, {
		key: 'getAllMessages',
		value: function getAllMessages() {
			return _proxy.queueProxy.list(this.path, true);
		}
	}, {
		key: 'purge',
		value: function purge() {
			_proxy.queueProxy.clear(this.path, true);
		}
	}], [{
		key: 'existsQueue',
		value: function existsQueue(path) {
			return _proxy.queueProxy.exists(path, true);
		}
	}, {
		key: 'createQueue',
		value: function createQueue(path) {
			var result = _proxy.queueProxy.create(path, true);

			if (!result) {
				throw new Error('Queue already exists');
			}

			return new Queue(path);
		}
	}, {
		key: 'openOrCreateQueue',
		value: function openOrCreateQueue(path) {
			_proxy.queueProxy.create(path, true);
			return new Queue(path);
		}
	}, {
		key: 'connectToRemoteQueue',
		value: function connectToRemoteQueue(path) {
			_proxy.queueProxy.connectRemote(path, true);
			return new Queue(path);
		}
	}]);
	return Queue;
}(_events.EventEmitter);

exports.default = Queue;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3F1ZXVlLmpzIl0sIm5hbWVzIjpbIlF1ZXVlIiwicGF0aCIsInJlY2VpdmluZyIsIkVycm9yIiwicXVldWVQcm94eSIsInJlY2VpdmUiLCJtZXNzYWdlIiwiZW1pdCIsImNiIiwiZm9ybWF0dGVkTWVzc2FnZSIsInNlbmQiLCJsaXN0IiwiY2xlYXIiLCJleGlzdHMiLCJyZXN1bHQiLCJjcmVhdGUiLCJjb25uZWN0UmVtb3RlIiwiRXZlbnRFbWl0dGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7OztJQUVxQkEsSzs7O0FBRXBCLGdCQUFZQyxJQUFaLEVBQWtCO0FBQUE7O0FBQUE7O0FBRWpCLFFBQUtBLElBQUwsR0FBWUEsSUFBWjtBQUZpQjtBQUdqQjs7OzttQ0EwQmdCO0FBQUE7O0FBQ2hCLE9BQUksS0FBS0MsU0FBVCxFQUFvQjtBQUNuQixVQUFNLElBQUlDLEtBQUosQ0FBVSw0Q0FBVixDQUFOO0FBQ0E7O0FBRUQsUUFBS0QsU0FBTCxHQUFpQixJQUFqQjs7QUFFQSxVQUFPRSxrQkFBV0MsT0FBWCxDQUFtQjtBQUN6QkosVUFBTSxLQUFLQSxJQURjO0FBRXpCSSxhQUFTLGlCQUFDQyxPQUFELEVBQWE7QUFDckIsWUFBS0MsSUFBTCxDQUFVLFNBQVYsRUFBcUJELE9BQXJCO0FBQ0E7QUFKd0IsSUFBbkIsQ0FBUDtBQU1BOzs7dUJBRUlBLE8sRUFBU0UsRSxFQUFJO0FBQ2pCLE9BQUlDLG1CQUFtQix5QkFBZUgsT0FBZixDQUF2Qjs7QUFFQSxVQUFPRixrQkFBV00sSUFBWCxDQUFnQjtBQUN0QlQsVUFBTSxLQUFLQSxJQURXO0FBRXRCSyxhQUFTRztBQUZhLElBQWhCLEVBR0pELEVBSEksQ0FBUDtBQUlBOzs7bUNBRWdCO0FBQ2hCLFVBQU9KLGtCQUFXTyxJQUFYLENBQWdCLEtBQUtWLElBQXJCLEVBQTJCLElBQTNCLENBQVA7QUFDQTs7OzBCQUVPO0FBQ1BHLHFCQUFXUSxLQUFYLENBQWlCLEtBQUtYLElBQXRCLEVBQTRCLElBQTVCO0FBQ0E7Ozs4QkF0RGtCQSxJLEVBQU07QUFDeEIsVUFBT0csa0JBQVdTLE1BQVgsQ0FBa0JaLElBQWxCLEVBQXdCLElBQXhCLENBQVA7QUFDQTs7OzhCQUVrQkEsSSxFQUFNO0FBQ3hCLE9BQUlhLFNBQVNWLGtCQUFXVyxNQUFYLENBQWtCZCxJQUFsQixFQUF3QixJQUF4QixDQUFiOztBQUVBLE9BQUksQ0FBQ2EsTUFBTCxFQUFhO0FBQ1osVUFBTSxJQUFJWCxLQUFKLENBQVUsc0JBQVYsQ0FBTjtBQUNBOztBQUVELFVBQU8sSUFBSUgsS0FBSixDQUFVQyxJQUFWLENBQVA7QUFDQTs7O29DQUV3QkEsSSxFQUFNO0FBQzlCRyxxQkFBV1csTUFBWCxDQUFrQmQsSUFBbEIsRUFBd0IsSUFBeEI7QUFDQSxVQUFPLElBQUlELEtBQUosQ0FBVUMsSUFBVixDQUFQO0FBQ0E7Ozt1Q0FFNEJBLEksRUFBTTtBQUNoQ0cscUJBQVdZLGFBQVgsQ0FBeUJmLElBQXpCLEVBQStCLElBQS9CO0FBQ0EsVUFBTyxJQUFJRCxLQUFKLENBQVVDLElBQVYsQ0FBUDtBQUNEOzs7RUE3QmdDZ0Isb0I7O2tCQUFkakIsSyIsImZpbGUiOiJxdWV1ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RXZlbnRFbWl0dGVyfSBmcm9tICdldmVudHMnO1xyXG5pbXBvcnQge3F1ZXVlUHJveHl9IGZyb20gJy4vcHJveHknO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUXVldWUgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xyXG5cclxuXHRjb25zdHJ1Y3RvcihwYXRoKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5wYXRoID0gcGF0aDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBleGlzdHNRdWV1ZShwYXRoKSB7XHJcblx0XHRyZXR1cm4gcXVldWVQcm94eS5leGlzdHMocGF0aCwgdHJ1ZSk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgY3JlYXRlUXVldWUocGF0aCkge1xyXG5cdFx0bGV0IHJlc3VsdCA9IHF1ZXVlUHJveHkuY3JlYXRlKHBhdGgsIHRydWUpXHJcblxyXG5cdFx0aWYgKCFyZXN1bHQpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdRdWV1ZSBhbHJlYWR5IGV4aXN0cycpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBuZXcgUXVldWUocGF0aCk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgb3Blbk9yQ3JlYXRlUXVldWUocGF0aCkge1xyXG5cdFx0cXVldWVQcm94eS5jcmVhdGUocGF0aCwgdHJ1ZSk7XHJcblx0XHRyZXR1cm4gbmV3IFF1ZXVlKHBhdGgpO1xyXG5cdH1cclxuXHJcbiAgc3RhdGljIGNvbm5lY3RUb1JlbW90ZVF1ZXVlKHBhdGgpIHtcclxuICAgIHF1ZXVlUHJveHkuY29ubmVjdFJlbW90ZShwYXRoLCB0cnVlKTtcclxuICAgIHJldHVybiBuZXcgUXVldWUocGF0aCk7XHJcbiAgfVxyXG5cclxuXHRzdGFydFJlY2VpdmluZygpIHtcclxuXHRcdGlmICh0aGlzLnJlY2VpdmluZykge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0FscmVhZHkgcmVjZWl2aW5nIG1lc3NhZ2VzIGZyb20gdGhpcyBxdWV1ZScpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMucmVjZWl2aW5nID0gdHJ1ZTtcclxuXHJcblx0XHRyZXR1cm4gcXVldWVQcm94eS5yZWNlaXZlKHtcclxuXHRcdFx0cGF0aDogdGhpcy5wYXRoLFxyXG5cdFx0XHRyZWNlaXZlOiAobWVzc2FnZSkgPT4ge1xyXG5cdFx0XHRcdHRoaXMuZW1pdCgncmVjZWl2ZScsIG1lc3NhZ2UpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHNlbmQobWVzc2FnZSwgY2IpIHtcclxuXHRcdGxldCBmb3JtYXR0ZWRNZXNzYWdlID0gSlNPTi5zdHJpbmdpZnkobWVzc2FnZSk7XHJcblxyXG5cdFx0cmV0dXJuIHF1ZXVlUHJveHkuc2VuZCh7XHJcblx0XHRcdHBhdGg6IHRoaXMucGF0aCxcclxuXHRcdFx0bWVzc2FnZTogZm9ybWF0dGVkTWVzc2FnZVxyXG5cdFx0fSwgY2IpO1xyXG5cdH1cclxuXHJcblx0Z2V0QWxsTWVzc2FnZXMoKSB7XHJcblx0XHRyZXR1cm4gcXVldWVQcm94eS5saXN0KHRoaXMucGF0aCwgdHJ1ZSk7XHJcblx0fVxyXG5cclxuXHRwdXJnZSgpIHtcclxuXHRcdHF1ZXVlUHJveHkuY2xlYXIodGhpcy5wYXRoLCB0cnVlKTtcclxuXHR9XHJcblxyXG59XHJcbiJdfQ==